# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Python.gitlab-ci.yml

# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/
image: python:latest

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  paths:
#    - .cache/pip
    - venv/

before_script:
  - python --version
  - pip install virtualenv
  - virtualenv venv
  - source venv/bin/activate
  - export BROWSER_VERSION=${BROWSER_VERSION}
  - export PLATFORM_NAME=${PLATFORM_NAME}
  - export SAUCE_BUILD=${SAUCE_BUILD}
  - export SAUCE_NAME=${SAUCE_NAME}
  - export SAUCE_SCREEN_RESOLUTION=${SAUCE_SCREEN_RESOLUTION}
  - export SAUCE_USER=${SAUCE_USER}
  - export SAUCE_KEY=${SAUCE_KEY}

mergejob:
  script:
    - echo "Executing Merge Job"
    - apt-get update
    # Install the chrome and chrome webdriver
    - apt-get install -y xvfb
    - apt-get install -y zip
    - apt-get install -y wget
    - apt-get install -y ca-certificates
    #- apt-get install -y libnss3-dev libasound2 libxss1 libappindicator3-1 libindicator7 gconf-service libgconf-2-4 libpango1.0-0 xdg-utils fonts-liberation libgbm1
    - apt-get install -y libnss3-dev libasound2 libxss1 libappindicator3-1 gconf-service libgconf-2-4 libpango1.0-0 xdg-utils fonts-liberation libgbm1
    - wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb 
    - dpkg -i google-chrome*.deb 
    - rm google-chrome*.deb
    - wget -N http://chromedriver.storage.googleapis.com/89.0.4389.23/chromedriver_linux64.zip
    - unzip chromedriver_linux64.zip
    - chmod +x chromedriver
    - cp chromedriver /usr/local/bin
    - rm chromedriver_linux64.zip
    - rm chromedriver
    - pip install -r requirements.txt
    - files=(`git diff-tree --no-commit-id --name-only -r $CI_COMMIT_SHA`)
      echo "files :::::" ${files}
    - suites=()
    - for f in ${files[@]}; 
      do if [[ $f =~ testsuite\/ ]]; 
      then echo suite file changed $f; 
      suites+=$f; 
      fi; done
    - if [[ ${#suites[@]} -gt 0 ]]; 
      then for s in ${suites[@]}; 
      do python3 -m robot --pythonpath $PWD $s; 
      done; 
      else python3 -m robot --pythonpath $PWD testsuite/*.robot; 
      fi

  artifacts:
    paths:
      - output.xml
      - report.html
      - log.html

  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always

nightlyjob:
  script:
    # an alternative approach is to install and run:
    - pip install -r requirements.txt
    # run the command here
    # - python -m robot --listener robotframework_reportportal.listener -v RP_LOG_BATCH_SIZE:100 -v RP_UUID:$CI_UUID -v RP_ENDPOINT:https://reportportal.productivity.dtcisb.technology -v RP_LAUNCH:nightly -v RP_PROJECT:roxas-api-espn-core-v3 --pythonpath $PWD testsuite/*.robot
    - if [ -z "$RF_SUITE" ]; then python -m robot --listener robotframework_reportportal.listener -v RP_LOG_BATCH_SIZE:100 -v RP_UUID:$RP_UUID -v RP_ENDPOINT:$RP_ENDPOINT -v RP_LAUNCH:fantasy_nightly -v RP_PROJECT:ESPN_Fantasy_App --pythonpath $PWD $CI_TAGS testsuite/*.robot; else python -m robot --listener robotframework_reportportal.listener -v RP_LOG_BATCH_SIZE:100 -v RP_UUID:$RP_UUID -v RP_ENDPOINT:$RP_ENDPOINT -v RP_LAUNCH:$RF_SUITE -v RP_PROJECT:ESPN_Fantasy_App --pythonpath $PWD $CI_TAGS testsuite/$RF_SUITE.robot; fi

  artifacts:
    paths:
      - output.xml
      - report.html
      - log.html

  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: always