# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Python.gitlab-ci.yml

# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/
image: python:latest

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  paths:
#    - .cache/pip
    - venv/

before_script:
  - echo "Hello, $GITLAB_USER_LOGIN!"
  - echo "HOME, $HOME"
  #- %gitlab-runner ALL = (ALL) NOPASSWD: ALL
  - whoami
  - python --version  # For debugging
  - pip install virtualenv
  - virtualenv venv
  - source venv/bin/activate
  # - useradd -d /builds/{GITLAB_USER_LOGIN} -g users -M -N builder
  # - chown -R builder:users ..
  # - sudo -H -i -u builder sh -e -x << EOS                                                                                                                                                                                                                       
  # - umask 0077                                                                                                                                                                                                                                               
  # - export CONTINUOUS_INTEGRATION_SYSTEM="gitlab" TIMESTAMP=`date +%Y%m%d%H%M%S` DEFAULT_TARGET="debug"                                                                                                                                                      
  # -  export PREFIX="\${HOME}/usr" SYSCONFDIR="\${HOME}/etc/conf" LOCALSTATEDIR="\${HOME}/var"                                                                                                                                                                 
  # -  cd my-project                                                                                                                                                                                                                                                  
  # -  make install                                                                                                                                                                                                                                             
  # -  make -C _deploy/debian clean package bundle BUILD_ID="-0{other}\${TIMESTAMP}"                                                                                                                                                                        
  # `EOS`
  #- apt-get install -y chromium-browser
  #- wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -echo 'deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main' | tee /etc/apt/sources.list.d/google-chrome.list
  #- apt update -y
  #- apt install -y gconf-service libasound2 libatk1.0-0 libcairo2 libcups2 libfontconfig1 libgdk-pixbuf2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libxss1 fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils
  #- apt-get install -y google-chrome-stable

mergejob:
  script:
    # an alternative approach is to install and run:
    - pip install -r requirements.txt
    - files=(`git diff-tree --no-commit-id --name-only -r $CI_COMMIT_SHA`)
      echo "files :::::" ${files}
    - suites=()
    - for f in ${files[@]}; 
      do if [[ $f =~ testsuite\/ ]]; 
      then echo suite file changed $f; 
      suites+=$f; 
      fi; done
    - if [[ ${#suites[@]} -gt 0 ]]; 
      then for s in ${suites[@]}; 
      do python3 -m robot --pythonpath $PWD $s; 
      done; 
      else python3 -m robot --pythonpath $PWD testsuite/*.robot; 
      fi

  artifacts:
    paths:
      - output.xml
      - report.html
      - log.html

  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always

nightlyjob:
  script:
    # an alternative approach is to install and run:
    - pip install -r requirements.txt
    # run the command here
    # - python -m robot --listener robotframework_reportportal.listener -v RP_LOG_BATCH_SIZE:100 -v RP_UUID:$CI_UUID -v RP_ENDPOINT:https://reportportal.productivity.dtcisb.technology -v RP_LAUNCH:nightly -v RP_PROJECT:roxas-api-espn-core-v3 --pythonpath $PWD testsuite/*.robot
    - if [ -z "$RF_SUITE" ]; then python -m robot --listener robotframework_reportportal.listener -v RP_LOG_BATCH_SIZE:100 -v RP_UUID:$CI_UUID -v RP_ENDPOINT:$CI_ENDPOINT -v RP_LAUNCH:nightly -v RP_PROJECT:roxas-api-espn-core-v3 --pythonpath $PWD $CI_TAGS testsuite/*.robot; else python -m robot --listener robotframework_reportportal.listener -v RP_LOG_BATCH_SIZE:100 -v RP_UUID:$CI_UUID -v RP_ENDPOINT:$CI_ENDPOINT -v RP_LAUNCH:$RF_SUITE -v RP_PROJECT:roxas-api-espn-core-v3 --pythonpath $PWD $CI_TAGS testsuite/$RF_SUITE-tests.robot; fi

  artifacts:
    paths:
      - output.xml
      - report.html
      - log.html

  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: always

# test:
#   script:
#     - echo "test for credentials role access"
#  #   - python setup.py test
# #    - pip install tox flake8  # you can also use tox
# #    - tox -e py36,flake8

# run:
#   script:
#     - apt -y update && apt install -y gcc
#     - apt -y update && apt install -y gunicorn
#     - pip install -q -r requirements.txt
#     - echo "running tests"
# #    - python setup.py bdist_wheel
#     # an alternative approach is to install and run:
# #    - pip install dist/*
#     # run the command here
#   artifacts:
#     when: always
#     paths:
#       - logs/*
#   rules:
#     - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
